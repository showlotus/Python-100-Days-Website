import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.CYgIfFH3.js";const e="/Python-100-Days-Website/assets/20210803203134.C6BS3z2S.png",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Day21-30/30.正则表达式的应用.md","filePath":"Day21-30/30.正则表达式的应用.md","lastUpdated":1740374267000}'),d={name:"Day21-30/30.正则表达式的应用.md"};function l(p,s,h,r,k,c){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="正则表达式的应用" tabindex="-1">正则表达式的应用 <a class="header-anchor" href="#正则表达式的应用" aria-label="Permalink to &quot;正则表达式的应用&quot;">​</a></h2><h3 id="正则表达式相关知识" tabindex="-1">正则表达式相关知识 <a class="header-anchor" href="#正则表达式相关知识" aria-label="Permalink to &quot;正则表达式相关知识&quot;">​</a></h3><p>在编写处理字符串的程时，经常会遇到在一段文本中查找符合某些规则的字符串的需求，正则表达式就是用于描述这些规则的工具，换句话说，我们可以使用正则表达式来定义字符串的匹配模式，即如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉。</p><p>举一个简单的例子，如果你在 Windows 操作系统中使用过文件查找并且在指定文件名时使用过通配符（<code>*</code>和<code>?</code>），那么正则表达式也是与之类似的用 来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求，当然你付出的代价是书写一个正则表达式比使用通配符要复杂得多，因为任何给你带来好处的东西都需要你付出对应的代价。</p><p>再举一个例子，我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是 11 位的数字（注意并不是随机的 11 位数字，因为你没有见过“25012345678”这样的手机号），而座机号则是类似于“区号-号码”这样的模式，如果不使用正则表达式要完成这个任务就会比较麻烦。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息很多都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python 通过标准库中的<code>re</code>模块来支持正则表达式操作。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博文叫<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noreferrer">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table tabindex="0"><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意字符</td><td><code>b.t</code></td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td><code>\\w</code></td><td>匹配字母/数字/下划线</td><td><code>b\\wt</code></td><td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td></tr><tr><td><code>\\s</code></td><td>匹配空白字符（包括\\r、\\n、\\t等）</td><td><code>love\\syou</code></td><td>可以匹配love you</td></tr><tr><td><code>\\d</code></td><td>匹配数字</td><td><code>\\d\\d</code></td><td>可以匹配01 / 23 / 99等</td></tr><tr><td><code>\\b</code></td><td>匹配单词的边界</td><td><code>\\bThe\\b</code></td><td></td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td><td><code>^The</code></td><td>可以匹配The开头的字符串</td></tr><tr><td><code>$</code></td><td>匹配字符串的结束</td><td><code>.exe$</code></td><td>可以匹配.exe结尾的字符串</td></tr><tr><td><code>\\W</code></td><td>匹配非字母/数字/下划线</td><td><code>b\\Wt</code></td><td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td></tr><tr><td><code>\\S</code></td><td>匹配非空白字符</td><td><code>love\\Syou</code></td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td><code>\\D</code></td><td>匹配非数字</td><td><code>\\d\\D</code></td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td><code>\\B</code></td><td>匹配非单词边界</td><td><code>\\Bio\\B</code></td><td></td></tr><tr><td><code>[]</code></td><td>匹配来自字符集的任意单一字符</td><td><code>[aeiou]</code></td><td>可以匹配任一元音字母字符</td></tr><tr><td><code>[^]</code></td><td>匹配不在字符集中的任意单一字符</td><td><code>[^aeiou]</code></td><td>可以匹配任一非元音字母字符</td></tr><tr><td><code>*</code></td><td>匹配0次或多次</td><td><code>\\w*</code></td><td></td></tr><tr><td><code>+</code></td><td>匹配1次或多次</td><td><code>\\w+</code></td><td></td></tr><tr><td><code>?</code></td><td>匹配0次或1次</td><td><code>\\w?</code></td><td></td></tr><tr><td><code>{N}</code></td><td>匹配N次</td><td><code>\\w{3}</code></td><td></td></tr><tr><td><code>{M,}</code></td><td>匹配至少M次</td><td><code>\\w{3,}</code></td><td></td></tr><tr><td><code>{M,N}</code></td><td>匹配至少M次至多N次</td><td><code>\\w{3,6}</code></td><td></td></tr><tr><td><code>|</code></td><td>分支</td><td><code>foo|bar</code></td><td>可以匹配foo或者bar</td></tr><tr><td><code>(?#)</code></td><td>注释</td><td></td><td></td></tr><tr><td><code>(exp)</code></td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td><code>(?&lt;name&gt;exp)</code></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td><code>(?:exp)</code></td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td><code>(?=exp)</code></td><td>匹配exp前面的位置</td><td><code>\\b\\w+(?=ing)</code></td><td>可以匹配I&#39;m dancing中的danc</td></tr><tr><td><code>(?&lt;=exp)</code></td><td>匹配exp后面的位置</td><td><code>(?&lt;=\\bdanc)\\w+\\b</code></td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td><code>(?!exp)</code></td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td><code>(?&lt;!exp)</code></td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td><code>*?</code></td><td>重复任意次，但尽可能少重复</td><td><code>a.*b</code><br><code>a.*?b</code></td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td><code>+?</code></td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td><code>??</code></td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td><code>{M,N}?</code></td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td><code>{M,}?</code></td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用<code>\\</code>进行转义处理，例如想匹配小数点可以写成<code>\\.</code>就可以了，因为直接写<code>.</code>会匹配任意字符；同理，想匹配圆括号必须写成<code>\\(</code>和<code>\\)</code>，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="python对正则表达式的支持" tabindex="-1">Python对正则表达式的支持 <a class="header-anchor" href="#python对正则表达式的支持" aria-label="Permalink to &quot;Python对正则表达式的支持&quot;">​</a></h3><p>Python 提供了<code>re</code>模块来支持正则表达式相关操作，下面是<code>re</code>模块中的核心函数。</p><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>compile(pattern, flags=0)</code></td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td><code>match(pattern, string, flags=0)</code></td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回<code>None</code></td></tr><tr><td><code>search(pattern, string, flags=0)</code></td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回<code>None</code></td></tr><tr><td><code>split(pattern, string, maxsplit=0, flags=0)</code></td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td><code>sub(pattern, repl, string, count=0, flags=0)</code></td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用<code>count</code>指定替换的次数</td></tr><tr><td><code>fullmatch(pattern, string, flags=0)</code></td><td><code>match</code>函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td><code>findall(pattern, string, flags=0)</code></td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td><code>finditer(pattern, string, flags=0)</code></td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td><code>purge()</code></td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td><code>re.I</code> / <code>re.IGNORECASE</code></td><td>忽略大小写匹配标记</td></tr><tr><td><code>re.M</code> / <code>re.MULTILINE</code></td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的<code>re</code>模块中的这些函数，实际开发中也可以用正则表达式对象（<code>Pattern</code>对象）的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过<code>compile</code>函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。" tabindex="-1">例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。 <a class="header-anchor" href="#例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。" aria-label="Permalink to &quot;例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入用户名: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入QQ号: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># match函数的第二个参数是要跟正则表达式做匹配的字符串对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.match(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">^[0-9a-zA-Z_]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{6,20}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, username)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入有效的用户名.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fullmatch函数要求字符串和正则表达式完全匹配</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 所以正则表达式没有写起始符和结束符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.fullmatch(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9]\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4,11}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qq)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入有效的QQ号.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你输入的信息是有效的!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了<code>r</code>），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作<code>\\\\</code>，例如表示数字的<code>\\d</code>得书写成<code>\\\\d</code>，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2-从一段文字中提取出国内手机号码。" tabindex="-1">例子2：从一段文字中提取出国内手机号码。 <a class="header-anchor" href="#例子2-从一段文字中提取出国内手机号码。" aria-label="Permalink to &quot;例子2：从一段文字中提取出国内手机号码。&quot;">​</a></h4><p>下面这张图是截止到 2017 年底，国内三家运营商推出的手机号段。</p><img src="`+e+`" style="zoom:100%;"><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建正则表达式对象，使用了前瞻和回顾来保证手机号前后不应该再出现数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.compile(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">(?&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[34578]\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{9}(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">不是15600998765，也不是110或119，王大锤的手机号才是15600998765。&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法一：查找所有匹配并保存到一个列表中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tels_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(pattern, sentence)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tels_list:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tel)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--------华丽的分隔线--------&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法二：通过迭代器取出匹配对象并获得匹配的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pattern.finditer(sentence):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp.group())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--------华丽的分隔线--------&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 方法三：通过search函数指定搜索位置找出所有匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pattern.search(sentence)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m.group())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pattern.search(sentence, m.end())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像 14 开头的号码只有 145 或 147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\\D)(1[38]\\d{9}|14[57]\\d{8}|15[0-35-9]\\d{8}|17[678]\\d{8})(?=\\D)</code>，国内好像已经有 19 和 16 开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3-替换字符串中的不良内容" tabindex="-1">例子3：替换字符串中的不良内容 <a class="header-anchor" href="#例子3-替换字符串中的不良内容" aria-label="Permalink to &quot;例子3：替换字符串中的不良内容&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Oh, shit! 你是傻逼吗? Fuck you.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">purified </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fuck|shit|[傻煞沙][比笔逼叉缺吊碉雕]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  &#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sentence, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IGNORECASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(purified)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Oh, *! 你是*吗? * you.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p><strong>说明：</strong><code> re</code>模块的正则表达式相关函数中都有一个<code>flags</code>参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为<code>flags</code>参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5" target="_blank" rel="noreferrer">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4-拆分长字符串" tabindex="-1">例子4：拆分长字符串 <a class="header-anchor" href="#例子4-拆分长字符串" aria-label="Permalink to &quot;例子4：拆分长字符串&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sentences_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.split(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[，。]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poem)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sentences_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sentences_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sentence]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sentences_list:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sentence)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>正则表达式在字符串的处理和匹配上真的非常强大，通过上面的例子相信大家已经感受到了正则表达式的魅力，当然写一个正则表达式对新手来说并不是那么容易，但是很多事情都是熟能生巧，大胆的去尝试就行了，有一个在线的<a href="https://c.runoob.com/front-end/854" target="_blank" rel="noreferrer">正则表达式测试工具</a>相信能够在一定程度上帮到大家。</p>`,28)]))}const g=i(d,[["render",l]]);export{E as __pageData,g as default};
